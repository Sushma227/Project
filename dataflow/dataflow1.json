{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_DLsqlserver",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_DLhttp",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1",
					"description": "Renaming join1 to select1 with columns 'Order ID, Customer Name, Category, Sub Category, City, Order Date, Sales, Discount, Profit, State, Invoice, Customer_ID, Description, Price, Total Price, Date, Quantitytotal'"
				},
				{
					"name": "filter2"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Invoice as string,",
				"          StockCode as string,",
				"          Description as string,",
				"          Quantity as short,",
				"          InvoiceDate as string,",
				"          Price as double,",
				"          Customer_ID as short,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          {Order ID} as string,",
				"          {Customer Name} as string,",
				"          Category as string,",
				"          {Sub Category} as string,",
				"          City as string,",
				"          {Order Date} as string,",
				"          Region as string,",
				"          Sales as short,",
				"          Discount as double,",
				"          Profit as double,",
				"          State as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 derive(Time = split(InvoiceDate, \" \")[2],",
				"          Date = split(InvoiceDate,\" \")[1],",
				"          {Total Price} = round(Price*Quantity, 2)) ~> derivedColumn1",
				"derivedColumn1 filter(Quantity >= 10 && Country == \"United Kingdom\") ~> filter1",
				"filter1 aggregate(groupBy(Customer_ID,",
				"          Invoice,",
				"          Description,",
				"          Price,",
				"          {Total Price},",
				"          Date),",
				"     Quantitytotal = sum(Quantity)) ~> aggregate1",
				"filter2 derive(Invoice = \"489434\") ~> derivedColumn2",
				"derivedColumn2, aggregate1 join(derivedColumn2@Invoice == aggregate1@Invoice,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {Order ID},",
				"          {Customer Name},",
				"          Category,",
				"          {Sub Category},",
				"          City,",
				"          {Order Date},",
				"          Sales,",
				"          Discount,",
				"          Profit,",
				"          State,",
				"          Invoice = derivedColumn2@Invoice,",
				"          Customer_ID,",
				"          Description,",
				"          Price,",
				"          {Total Price},",
				"          Date,",
				"          Quantitytotal",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 filter(!startsWith({Order ID}, '\\\"')) ~> filter2",
				"select1 aggregate(groupBy({Order ID},",
				"          {Customer Name},",
				"          Category,",
				"          {Sub Category},",
				"          {Total Price},",
				"          Date,",
				"          Discount,",
				"          City,",
				"          Profit),",
				"     Sales = sum(Sales)) ~> aggregate2",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> sink2"
			]
		}
	}
}