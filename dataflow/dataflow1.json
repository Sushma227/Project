{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_DLsqlserver",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Datalake",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Invoice as string,",
				"          StockCode as string,",
				"          Description as string,",
				"          Quantity as short,",
				"          InvoiceDate as string,",
				"          Price as double,",
				"          Customer_ID as short,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(Time = split(InvoiceDate, \" \")[2],",
				"          Date = split(InvoiceDate,\" \")[1],",
				"          {Total Price} = round(Price*Quantity, 2)) ~> derivedColumn1",
				"derivedColumn1 filter(Quantity >= 10 && Country == \"United Kingdom\") ~> filter1",
				"filter1 aggregate(groupBy(Customer_ID,",
				"          Invoice,",
				"          Description,",
				"          Price,",
				"          {Total Price},",
				"          Date),",
				"     Quantitytotal = sum(Quantity)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}